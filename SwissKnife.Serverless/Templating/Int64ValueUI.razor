@using Blazorise
@using Classeur.Core.CustomizableStructure

@implements IValueUI

<Label For="@_textEdit?.ElementId">@Field.Label</Label>
<TextEdit @ref="_textEdit"
          Text="@(ViewModel?.GetForUI(Field.Key).ToString() ?? Int64FieldType.Defaults.Default.ToString())"
          TextChanged="OnTextChanged"
          Border="_border" />

@code {

    private TextEdit? _textEdit;
    private IFluentBorder _border = Border.Success;

    [Parameter]
    public FieldDescription Field { get; set; }

    [Parameter]
    public IStructuredDataViewModel? ViewModel { get; set; }

    protected override void OnParametersSet()
    {
        if (ViewModel != null!)
        {
            _border = ViewModel.TryGetForModel(Field.Key, out object? value)
                      && Field.Type.TryParse(value, out _)
                ? Border.Success
                : Border.Warning;
        }
    }

    private void OnTextChanged(string text) => ViewModel!.Set(Field.Key, text, obj => obj switch
                                                                                   {
                                                                                       long => obj,
                                                                                       string s => long.Parse(s),
                                                                                       _ => throw new Exception(),
                                                                                   });

}
