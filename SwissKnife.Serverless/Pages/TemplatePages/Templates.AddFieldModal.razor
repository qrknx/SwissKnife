@using System.Text
@using System.Collections.Immutable
@using Blazorise;
@using Classeur.Core.CustomizableStructure
@using DotNetToolbox
@using Microsoft.AspNetCore.Components
@using SwissKnife.Serverless.Templating

@inject ImmutableList<KnownFieldTypeDescription> _fieldTypeDescriptions;

<Modal @ref="_addFieldDialog">
	<ModalContent Centered="true">
		<ModalHeader>
			<ModalTitle>Add field</ModalTitle>
			<CloseButton/>
		</ModalHeader>
		<ModalBody>
			<Field>
				<FieldLabel>Label</FieldLabel>
				<TextEdit @bind-Text="_label"/>
			</Field>
			<Field>
				<FieldLabel>Type</FieldLabel>
				<Select @bind-SelectedValue="_selectedIndex">
					@foreach (var (i, fieldTypeDescription) in _fieldTypeDescriptions.Select((f, i) => (i, f)))
					{
						<SelectItem Value="i">@fieldTypeDescription.Name</SelectItem>
					}
				</Select>
			</Field>
            <DynamicComponent @ref="_fieldCreateForm"
                              Type="_fieldTypeDescriptions[_selectedIndex].EditFormType" />
		</ModalBody>
		<ModalFooter>
			<Button Color="Color.Primary" Clicked="AddFieldAsync">Add</Button>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {

	private Modal _addFieldDialog = null!;
	private DynamicComponent _fieldCreateForm = null!;

	private string _label = "";

	private int _selectedIndex;

	public Modal Modal => _addFieldDialog;

	[Parameter]
	public EventCallback<FieldDescription> FieldAdding { get; set; }

	public void ResetLabel() => _label = "";

	private async Task AddFieldAsync()
	{
		var ui = (IFieldTypeUI)_fieldCreateForm.Instance!;

		await FieldAdding.InvokeAsync(ui.GetDescription(FieldKey.For(_label), _label));
	}

}
