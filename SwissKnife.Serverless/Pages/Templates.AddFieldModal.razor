@using System.Text
@using Blazorise;
@using Microsoft.AspNetCore.Components
@using Classeur.Core.CustomizableStructure
@using DotNetToolbox

<Modal @ref="_addFieldDialog">
	<ModalContent Centered="true">
		<ModalHeader>
			<ModalTitle>Add field</ModalTitle>
			<CloseButton/>
		</ModalHeader>
		<ModalBody>
			<Field>
				<FieldLabel>Label</FieldLabel>
				<TextEdit @bind-Text="_label"/>
			</Field>
			<Field>
				<FieldLabel>Type</FieldLabel>
				<Select TValue="string" @bind-SelectedValue="_selectedFieldId">
					@foreach (var known in UIFieldType.All)
					{
						<SelectItem Value="known.Id">@known.Name</SelectItem>
					}
				</Select>
			</Field>
			@switch (SelectedField)
			{
				case StringUIFieldType type:
					<Field>
						<FieldLabel>Default</FieldLabel>
						<TextEdit @bind-Text="@type.Default"/>
					</Field>
					<Field>
						<FieldLabel>Max length</FieldLabel>
						<TextEdit @bind-Text="@type.MaxLength"/>
					</Field>
					break;

				case Int64UIFieldType type:
					<Field>
						<FieldLabel>Default</FieldLabel>
						<TextEdit @bind-Text="@type.Default"/>
					</Field>
					<Field>
						<FieldLabel>Min</FieldLabel>
						<TextEdit @bind-Text="@type.Min"/>
					</Field>
					<Field>
						<FieldLabel>Max</FieldLabel>
						<TextEdit @bind-Text="@type.Max"/>
					</Field>
					break;

				default:
					throw new NotImplementedException();
			}
		</ModalBody>
		<ModalFooter>
			<Button Color="Color.Primary" Clicked="AddFieldAsync">Add</Button>
		</ModalFooter>
	</ModalContent>
</Modal>

@code {

	private Modal? _addFieldDialog;

	private string _label = "";

	private UIFieldType[] _newFields = UIFieldType.All.ToArray(t => (UIFieldType)Activator.CreateInstance(t.Type)!);

	private string _selectedFieldId = UIFieldType.All.First().Id;

	private UIFieldType SelectedField => _newFields.First(f => f.GetType().FullName == _selectedFieldId);

	public Modal Modal => _addFieldDialog!;

	private FieldKey FieldKey
	{
		get
		{
			List<List<char>> chunks = new()
			{
				new(),
			};

			foreach (char c in _label)
			{
				if (c == '_' || char.IsLetterOrDigit(c))
				{
					chunks[^1].Add(char.ToLower(c));
				}
				else if (chunks[^1].Any())
				{
					chunks.Add(new());
				}
			}

			if (!chunks[0].Any())
			{
				throw new Exception();
			}

			if (!chunks[^1].Any())
			{
				chunks.RemoveAt(chunks.Count - 1);
			}

			StringBuilder stringBuilder = new(!char.IsDigit(chunks[0][0]) ? "" : "_",
			                                  capacity: chunks.Sum(c => c.Count) + chunks.Count);

			stringBuilder.AppendJoin("", chunks[0]);

			foreach (List<char> chunk in chunks.Skip(1))
			{
				stringBuilder.Append('_').AppendJoin("", chunk);
			}

			return new FieldKey(stringBuilder.ToString());
		}
	}

	[Parameter]
	public EventCallback<FieldDescription> FieldAdding { get; set; }

	public void ResetLabel() => _label = "";

	private async Task AddFieldAsync()
		=> await FieldAdding.InvokeAsync(SelectedField.GetDescription(FieldKey, _label));

	private abstract record UIFieldType
	{
		public static readonly KnownFieldTypeDescription[] All =
		{
			new("String", typeof(StringUIFieldType)),
			new("Int64", typeof(Int64UIFieldType)),
		};

		public abstract FieldDescription GetDescription(FieldKey key, string label);

		public readonly record struct KnownFieldTypeDescription(string Name, Type Type)
		{
			public string Id => Type.FullName!;
		}
	}

	private record StringUIFieldType : UIFieldType
	{
		public string MaxLength = StringFieldType.Defaults.MaxLength.ToString();
		public string Default = StringFieldType.Defaults.Default;

		public override FieldDescription GetDescription(FieldKey key, string label)
			=> new(key, label, new StringFieldType(maxLength: int.Parse(MaxLength), @default: Default));
	}

	private record Int64UIFieldType : UIFieldType
	{
		public string Min = Int64FieldType.Defaults.Min.ToString();
		public string Max = Int64FieldType.Defaults.Max.ToString();
		public string Default = Int64FieldType.Defaults.Default.ToString();

		public override FieldDescription GetDescription(FieldKey key, string label)
			=> new(key, label, new Int64FieldType(min: long.Parse(Min),
			                                      max: long.Parse(Max),
			                                      @default: long.Parse(Default)));
	}

}
