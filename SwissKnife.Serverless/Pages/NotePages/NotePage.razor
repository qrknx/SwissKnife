@page "/notes/{NoteId:long}"

@using Blazorise
@using Classeur.Core
@using Classeur.Core.CustomizableStructure
@using SwissKnife.Serverless.Templating

@inject IJSRuntime _js;
@inject NavigationManager _navigator;
@inject IRepository<Template, string> _templatesRepository;
@inject IRepositoryFactory<Note, string> _notesRepositoryFactory;

<PageTitle>@Title</PageTitle>

<h1>@Title</h1>

<Button Disabled="@(!_hasValidChanges)" Clicked="SaveAsync" Color="Color.Primary">Save changes</Button>

<StructuredDataForm TCustomizableDocument="Note"
                    Document="_note" Changing="UpdateHasChanges"
                    Schema="_schema"
                    @ref="_form" />

@code {

    private IRepository<Note, string> _repository = null!;
    private StructuredDataForm<Note> _form = null!;
    private Note _note = null!;
    private StructureSchema _schema = null!;
    private bool _hasValidChanges;

    private string Title => $"Note {NoteId}";

    [Parameter]
    public long NoteId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        List<Template> templates = await _templatesRepository.GetAllAsync(CancellationToken.None);
        _repository = _notesRepositoryFactory.GetRepository(templates.Select(t => t.Schema));
        _note = await _repository.GetAsync(NoteId.ToString(), CancellationToken.None);
        _schema = templates.First(t => t.Schema.Id == _note.Data.SchemaId).Schema;
    }

    private async Task SaveAsync()
    {
        _form.TryGetChanged(out Note? changed);
        _note = await _repository.UpdateAsync(changed!, CancellationToken.None);
        UpdateHasChanges();
    }

    private void UpdateHasChanges()
    {
        _hasValidChanges = _form.TryGetChanged(out Note? changed) && !_note.Equals(changed);
    }

}
